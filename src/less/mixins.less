// ===== REM UNIT MIXINS ====
@base-font-size-px: 10;
// root's font size. @base-font-size-px MUST BE AN INTEGER.

@pxtorem-js-function: ~`pxtorem = function(px){ if (typeof rmxsBaseFontSize == 'undefined')  rmxsBaseFontSize = @{base-font-size-px}; return (parseInt(px.replace(/(^\d+)(.+$)/i,'$1')) / rmxsBaseFontSize + 'rem') }`;

// ===== FONT MIXINS =====
.font-size(@value) {
    font-size: @value;
}

.font-size(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    font-size: @rem-value;
}

.line-height(@value) {
    line-height: @value;
}

.line-height(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    line-height: @rem-value;
}

.text-indent(@value) {
    text-indent: @value;
}

.text-indent(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    text-indent: @rem-value;
}

// ===== MARGIN MIXINS =====
.margin(@value) {
    margin: @value;
}

.margin(@vvalue, @hvalue) {
    margin: @arguments;
}

.margin(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    margin: @rem-value;
}

.margin(@vertical, @horizontal) when (ispixel(@vertical)) and (ispixel(@horizontal)) {
    @rem-vvalue: ~`pxtorem('@{vertical}')`;
    @rem-hvalue: ~`pxtorem('@{horizontal}')`;
    margin: @rem-vvalue @rem-hvalue;
}

.margin(@vertical, @horizontal) when (ispixel(@vertical)) {
    @rem-value: ~`pxtorem('@{vertical}')`;
    .margin(@rem-value, @horizontal);
}

.margin(@vertical, @horizontal) when (ispixel(@horizontal)) {
    @rem-value: ~`pxtorem('@{horizontal}')`;
    .margin(@vertical, @rem-value);
}

.margin-top(@value) {
    margin-top: @value;
}

.margin-top(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    margin-top: @rem-value;
}

.margin-right(@value) {
    margin-right: @value;
}

.margin-right(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    margin-right: @rem-value;
}

.margin-bottom(@value) {
    margin-bottom: @value;
}

.margin-bottom(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    margin-bottom: @rem-value;
}

.margin-left(@value) {
    margin-left: @value;
}

.margin-left(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    margin-left: @rem-value;
}

// ===== PADDING MIXINS =====
.padding(@value) {
    padding: @value;
}

.padding(@vvalue, @hvalue) {
    padding: @arguments;
}

.padding(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    padding: @rem-value;
}

.padding(@vertical, @horizontal) when (ispixel(@vertical)) and (ispixel(@horizontal)) {
    @rem-vvalue: ~`pxtorem('@{vertical}')`;
    @rem-hvalue: ~`pxtorem('@{horizontal}')`;
    padding: @rem-vvalue @rem-hvalue;
}

.padding(@vertical, @horizontal) when (ispixel(@vertical)) {
    @rem-value: ~`pxtorem('@{vertical}')`;
    .padding(@rem-value, @horizontal);
}

.padding(@vertical, @horizontal) when (ispixel(@horizontal)) {
    @rem-value: ~`pxtorem('@{horizontal}')`;
    .padding(@vertical, @rem-value);
}

.padding-top(@value) {
    padding-top: @value;
}

.padding-top(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    padding-top: @rem-value;
}

.padding-right(@value) {
    padding-right: @value;
}

.padding-right(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    padding-right: @rem-value;
}

.padding-bottom(@value) {
    padding-bottom: @value;
}

.padding-bottom(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    padding-bottom: @rem-value;
}

.padding-left(@value) {
    padding-left: @value;
}

.padding-left(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    padding-left: @rem-value;
}

// ===== POSITION MIXINS =====
.height(@value) {
    height: @value;
}

.height(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    height: @rem-value;
}

.min-height(@value) {
    min-height: @value;
}

.min-height(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    min-height: @rem-value;
}

.max-height(@value) {
    max-height: @value;
}

.max-height(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    max-height: @rem-value;
}

.width(@value) {
    width: @value;
}

.width(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    width: @rem-value;
}

.min-width(@value) {
    min-width: @value;
}

.min-width(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    min-width: @rem-value;
}

.max-width(@value) {
    max-width: @value;
}

.max-width(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    max-width: @rem-value;
}

.top(@value) {
    top: @value;
}

.top(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    top: @rem-value;
}

.left(@value) {
    left: @value;
}

.left(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    left: @rem-value;
}

.right(@value) {
    right: @value;
}

.right(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    right: @rem-value;
}

.bottom(@value) {
    bottom: @value;
}

.bottom(@value) when (ispixel(@value)) {
    @rem-value: ~`pxtorem('@{value}')`;
    bottom: @rem-value;
}

// Snippets
// ----------------------------------------------------------------------------
.auto {
    float: left;
    padding: 0 (@grid-gutter-width / 2);
    width: auto;
}

.page-area {
    background-color: @background-bright;
    border: 1px solid @border-bright;
    opacity: 0.9;
    .padding-top(15px);
    border-radius: 4px;
    .margin-bottom-narrow;
}

.list {
    ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
}

.link {
    a {
        color: @link-text-color;

        &:hover {
            cursor: pointer;
            text-decoration: none;
            color: @link-hover-text-color;
        }
    }
}

.list-horizontal {
    ul {
        .clearfix;
    }

    li {
        display: inline-block;
        margin-right: 15px;
    }
}

.link-box {
    a {
        .padding(5px);
        .width(100%);
        background-color: @link-background-color;

        &:hover {
            color: #fff;
            background-color: @link-hover-background-color;
        }
    }
}

.link-square(@length) {
    a {
        display: inline-block;
        .padding(5px);
        .width(@length);
        .height(@length);
        background-color: @link-background-color;

        &:hover {
            color: #fff;
            background-color: @link-hover-background-color;
        }
    }
}

.image {
    img {
        max-width: 100%;
        .margin-bottom-narrow;

        &:last-child {
            margin-bottom: 0;
        }
    }
}

.image-bordered {
    img {
        .border-default;
    }
}

.border-default {
    .border;
    .border-bright;
    .border-broad;
}

.border {
    border: 1px solid @border-color-bright;
}

.border-bright {
    border-color: @border-color-bright;
}

.border-dark {
    border-color: @border-color-dark;
}

.border-darker {
    border-color: @border-color-darker;
}

.border-broad {
    border-width: @border-width-broad;
}

.border-thin {
    border-width: @border-width-thin;
}

.background-dark {
    background-color: @background-dark;
}

.background-bright {
    background-color: @background-bright;
}

.translucent {
    opacity: 0.9;
}

.text {
    line-height: 24px;
    color: @text-bright;
}

.text-block {
    text-align: justify;
}

.margin-bottom-default {
    margin-bottom: @margin-default;
}

.margin-bottom-narrow {
    margin-bottom: @margin-default;
}

.pre {
    white-space: pre;
}

.nowrap {
    white-space: nowrap;
}

.pre-wrap {
    white-space: pre-wrap;
}

.pre-line {
    white-space: pre-line;
}

.rotate(@value) {
    -webkit-transform: rotate(@value);
    -moz-transform: rotate(@value);
    -o-transform: rotate(@value);
    writing-mode: tb-rl;
}

.text-rotate(@value, @top-offset) {
    .rotate(@value);
    transform-origin: 0 100%;
    position: absolute;
    .top(-@top-offset);
}

.rotate-90 {
    .rotate(90deg);
}

.rotate-180 {
    .rotate(180deg);
}

.rotate-270 {
    .rotate(270deg);
}